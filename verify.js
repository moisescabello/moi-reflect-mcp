#!/usr/bin/env node
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import dotenv from 'dotenv';

// Configurar variables de entorno de prueba
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config({ path: join(__dirname, '.env') });

const hasReflectToken = Boolean(process.env.REFLECT_TOKEN);
const hasGraphId = Boolean(process.env.GRAPH_ID);
const configuredTimeZone = process.env.REFLECT_TIMEZONE;

console.log('üîç Verificando configuraci√≥n del servidor MCP de Reflect...\n');

// Verificar estructura de herramientas
const TOOLS = [
  {
    name: 'add_to_daily_note',
    requiredFields: ['text']
  },
  {
    name: 'add_to_today',
    requiredFields: ['text']
  },
  {
    name: 'add_to_tomorrow',
    requiredFields: ['text']
  },
  {
    name: 'create_note',
    requiredFields: ['subject', 'content']
  },
  {
    name: 'save_link',
    requiredFields: ['url']
  },
  {
    name: 'get_links',
    requiredFields: []
  },
  {
    name: 'get_books',
    requiredFields: []
  },
  {
    name: 'schedule_reminder',
    requiredFields: ['date', 'reminder']
  }
];

let errorsFound = false;

// Verificar cada herramienta
console.log('üìã Verificando herramientas:');
TOOLS.forEach(tool => {
  const hasRequiredFields = Array.isArray(tool.requiredFields);
  const invalidFields = hasRequiredFields
    ? tool.requiredFields.filter(field => typeof field !== 'string' || field.trim() === '')
    : [];

  if (!hasRequiredFields || invalidFields.length > 0) {
    const issue = !hasRequiredFields ? 'no definidos' : invalidFields.join(', ');
    console.log(`   ‚ùå ${tool.name} - Campos requeridos inv√°lidos: ${issue}`);
    errorsFound = true;
  } else {
    console.log(`   ‚úÖ ${tool.name} - Configuraci√≥n correcta`);
  }
});

// Verificar imports
console.log('\nüì¶ Verificando dependencias:');
try {
  await import('@modelcontextprotocol/sdk/server/index.js');
  console.log('   ‚úÖ @modelcontextprotocol/sdk');
} catch (e) {
  console.log('   ‚ùå @modelcontextprotocol/sdk - No se pudo importar');
  errorsFound = true;
}

try {
  await import('axios');
  console.log('   ‚úÖ axios');
} catch (e) {
  console.log('   ‚ùå axios - No se pudo importar');
  errorsFound = true;
}

try {
  await import('dotenv');
  console.log('   ‚úÖ dotenv');
} catch (e) {
  console.log('   ‚ùå dotenv - No se pudo importar');
  errorsFound = true;
}

// Verificar configuraci√≥n
console.log('\n‚öôÔ∏è  Verificando configuraci√≥n:');
if (hasReflectToken) {
  console.log('   ‚úÖ REFLECT_TOKEN configurado');
} else {
  console.log('   ‚ùå REFLECT_TOKEN no encontrado');
  errorsFound = true;
}

if (hasGraphId) {
  console.log('   ‚úÖ GRAPH_ID configurado');
} else {
  console.log('   ‚ùå GRAPH_ID no encontrado');
  errorsFound = true;
}

if (configuredTimeZone) {
  try {
    new Intl.DateTimeFormat('en-CA', {
      timeZone: configuredTimeZone,
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    }).format(new Date());
    console.log(`   ‚úÖ REFLECT_TIMEZONE v√°lido (${configuredTimeZone})`);
  } catch (error) {
    console.log(`   ‚ùå REFLECT_TIMEZONE inv√°lido: ${configuredTimeZone}`);
    errorsFound = true;
  }
} else {
  console.log('   ‚ÑπÔ∏è  REFLECT_TIMEZONE no configurado (se usar√° la zona horaria del sistema)');
}

// Verificar archivos necesarios
console.log('\nüìÑ Verificando archivos:');
const fs = await import('fs');
const files = [
  'server.js',
  'package.json',
  'README.md',
  '.env.example',
  'get-graph-id.js'
];

for (const file of files) {
  if (fs.existsSync(join(__dirname, file))) {
    console.log(`   ‚úÖ ${file}`);
  } else {
    console.log(`   ‚ùå ${file} - No encontrado`);
    errorsFound = true;
  }
}

// Resumen
console.log('\n' + '='.repeat(50));
if (errorsFound) {
  console.log('‚ùå Se encontraron errores en la verificaci√≥n');
  console.log('   Por favor, revisa los problemas indicados arriba');
  process.exit(1);
} else {
  console.log('‚úÖ ¬°Todo est√° configurado correctamente!');
  console.log('\nüìù Pr√≥ximos pasos:');
  console.log('   1. Edita .env con tu token real de Reflect');
  console.log('   2. Ejecuta: npm run setup');
  console.log('   3. Configura Claude Desktop con tu configuraci√≥n');
  console.log('   4. ¬°Listo para usar!');
  process.exit(0);
}
